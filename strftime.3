.TH STRFTIME 3
.SH NAME
strftime \- generate formatted time information
.SH SYNOPSIS
.ft B
.nf
#include <sys/types.h>
#include <time.h>
.sp
size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *timeptr);
.fi
.SH DESCRIPTION
The following description is transcribed verbatim from the April 12, 2011
draft standard for ISO C.
This draft is essentially identical in technical content
to the final version of the standard.
.LP
``The
.B strftime
function places characters into the array pointed to by
.B s
as controlled by the string pointed to by
.BR format .
The format shall be a multibyte character sequence, beginning and ending in
its initial shift state.
The
.B format
string consists of zero or more conversion specifiers and ordinary
multibyte characters.  A conversion specifier consists of a
.B %
character, possibly followed by an
.B E
or
.B O
modifier character (described below),
followed by a character that determines the behavior of the
conversion specifier.
All ordinary multibyte characters (including the terminating null
character) are copied unchanged into the array.
If copying takes place between objects that overlap the behavior is undefined.
No more than
.B maxsize
characters are placed into the array.
.PP
``Each conversion specifier is replaced by appropriate characters as described
in the following list.
The appropriate characters are determined by the
.B LC_TIME
category of the current locale and by the values
of zero or more members of the broken-down time
structure pointed to by
.BR timeptr ,
as specified by brackets in the description.
If any of the specified values is outside the normal range, the characters
stored are unspecified.''
.TP
.B %a
is replaced by the locale's abbreviated weekday name.
.RB [ tm_wday ]
.TP
.B %A
is replaced by the locale's full weekday name.
.RB [ tm_wday ]
.TP
.B %b
is replaced by the locale's abbreviated month name.
.RB [ tm_mon ]
.TP
.B %B
is replaced by the locale's full month name.
.RB [ tm_mon ]
.TP
.B %c
is replaced by the locale's appropriate date and time representation.
(This is
\fB"%a %b %e %T %Y"\fR
in the \fB"C"\fR
locale.)
.TP
.B %C
is replaced by the year divided by 100 and truncated to an integer,
as a decimal number
.RB ( 00 - 99 ).
.RB [ tm_year ]
.TP
.B %d
is replaced by the day of the month as a decimal number
.RB ( 01 - 31 ).
.RB [ tm_mday ]
.TP
.B %D
is equivalent to
.BR %m/%d/%y .
.RB [ tm_mon ", " tm_mday ", " tm_year ]
.TP
.B %e
is replaced by the day of the month as a decimal number
.RB ( 1 - 31 );
a single digit is preceded by a space.
.RB [ tm_mday ]
.TP
.B %F
is equivalent to
.B %Y\-%m\-%d
(the ISO 8601 date format).
.RB [ tm_year ", " tm_mon ", " tm_mday ]
.TP
.B %g
is replaced by the year without century of the ISO week number
as a decimal number
.RB ( 00 - 99 ).
.RB [ tm_year ", " tm_wday ", " tm_yday ]
.TP
.B %G
is replaced by the year with century of the ISO week number
as a decimal number.
.RB [ tm_year ", " tm_wday ", " tm_yday ]
.TP
.B %h
is equivalent to
.BR %b .
.RB [ tm_mon ]
.TP
.B %H
is replaced by the hour (24-hour clock) as a decimal number
.RB ( 00 - 23 ).
.RB [ tm_hour ]
.TP
.B %I
is replaced by the hour (12-hour clock) as a decimal number
.RB ( 01 - 12 ).
.RB [ tm_hour ]
.TP
.B %j
is replaced by the day of the year as a decimal number
.RB ( 001 - 366 ).
.RB [ tm_yday ]
.TP
.B %m
is replaced by the month as a decimal number
.RB ( 01 - 12 ).
.RB [ tm_mon ]
.TP
.B %M
is replaced by the minute as a decimal number
.RB ( 00 - 59 ).
.RB [ tm_min ]
.TP
.B %n
is replaced with a newline character (\s-1ASCII LF\s+1).
.TP
.B %p
is replaced by the locale's equivalent of the AM/PM designations associated
with a 12-hour clock.
.RB [ tm_hour ]
.TP
.B %r
is replaced by the locale's 12-hour clock time.
(This is
\fB"%I:%M:%S %p"\fR
in the \fB"C"\fR
locale.)
.RB [ tm_hour ", " tm_min ", " tm_sec ]
.TP
.B %R
is equivalent to
.BR %H:%M .
.RB [ tm_hour ", " tm_min ]
.TP
.B %S
is replaced by the second as a decimal number
.RB ( 00 - 60 ).
.RB [ tm_sec ]
.TP
.B %t
is replaced with a \s-1TAB\s+1 character.
.TP
.B %T
is equivalent to
.BR %H:%M:%S .
.RB [ tm_hour ", " tm_min ", " tm_sec ]
.TP
.B %u
is replaced by the ISO 8601 weekday as a decimal number
.RB [ "1 " (Monday)- 7 ].
.RB [ tm_wday ]
.TP
.B %U
is replaced by the week number of the year (the first Sunday as the first
day of week 1) as a decimal number
.RB ( 00 - 53 ).
.RB [ tm_year ", " tm_wday ", " tm_yday ]
.TP
.B %V
is replaced by the ISO 8601 week number of the year (the first Monday as the first
day of week 1) as a decimal number
.RB ( 01 - 53 ).
.RB [ tm_year ", " tm_wday ", " tm_yday ]
.TP
.B %w
is replaced by the weekday as a decimal number
.RB [ "0 " (Sunday)- 6 ].
.RB [ tm_wday ]
.TP
.B %W
is replaced by the week number of the year (the first Monday as the first
day of week 1) as a decimal number
.RB ( 00 - 53 ).
.RB [ tm_year ", " tm_wday ", " tm_yday ]
.TP
.B %x
is replaced by the locale's appropriate date representation.
(This is
\fB"%x/%d/%y"\fR
in the \fB"C"\fR
locale.)
.TP
.B %X
is replaced by the locale's appropriate time representation.
(This is
.B "%T"
in the \fB"C"\fR
locale.)
.TP
.B %y
is replaced by the year without century as a decimal number
.RB ( 00 - 99 ).
.RB [ tm_year ]
.TP
.B %Y
is replaced by the year with century as a decimal number.
.RB [ tm_year ]
.TP
.B %z
The timezone offset in a +HHMM format (e.g. the format necessary to
produce RFC-822/RFC-1036 date headers).
.RB [ tm_isdst ]
.TP
.B %Z
is replaced by the time zone name or abbreviation, or by no characters if
no time zone is determinable.
.RB [ tm_isdst ]
.TP
.B %%
is replaced by
.BR % .
.LP
If a conversion specifier is not one of the above, the behavior is
undefined.
.LP
The draft standard says this about the ISO 8601 week-based year:
.RS
.ll -.5i
.LP
.BR %g ,
.BR %G ,
and
.B %V
give values according to the ISO 8601 week-based year.
In this system, weeks begin on a Monday and week 1 of the year is the week
that includes January 4th, which is also the week that includes the
first Thursday of the year, and is also the first week that contains at
least four days in the year.
If the first Monday of January is the 2nd, 3rd, or 4th, the preceding
days are part of the last week of the preceding year; thus for Saturday
2nd January 1999,
.B %G
is replaced by 1998 and
.B %V
is replaced by
.BR 53 .
If December 29th, 30th, or 31st is a Monday, it and any following days
are part of week 1 of the following year.
Thus, for Tuesday 30th December 1997,
.B %G
is replaced by 1998 and
.B %V
is replaced by
.BR 01 .
.RE
.ll
.LP
A somewhat more readable description of the algorithm is provided below.
.SH RETURNS
``If the total number of resulting characters including the terminating null
character is not more than
.BR maxsize ,
the
.B strftime
function returns the number of characters placed into the array pointed to
by
.B s
not including the terminating null character.
Otherwise, zero is returned and the contents of the array are indeterminate.''
.SH ISO 8601
The method for determining the week number as specified by ISO 8601 is:
if the week containing January 1 has four or more days in the
new year, then it is week 1, otherwise it is the highest numbered
week of the previous year (52 or 53)
and the next week is week 1.
All days in a new year preceding the first Monday are considered to be
in week 0.
.PP
For example, January 1, 1993, is in week 53 of 1992. Thus, the year
of its ISO week number is 1992, even though its year is 1993.
Similarly, December 31, 1973, is in week 1 of 1974. Thus, the year
of its ISO week number is 1974, even though its year is 1973.
.SH ALTERNATE REPRESENTATIONS
The alternate representations
.BR %Ec ,
.BR %EC ,
.BR %Ex ,
.BR %EX ,
.BR %Ey ,
.BR %EY ,
.BR %Od ,
.BR %Oe ,
.BR %OH ,
.BR %OI ,
.BR %Om ,
.BR %OM ,
.BR %OS ,
.BR %Ou ,
.BR %OU ,
.BR %OV ,
.BR %Ow ,
.BR %OW ,
and
.B %Oy
are recognized, but their normal representations are used.
.SH NON-ISO EXTENSIONS
.SS SunOS Extensions
If
.B SUNOS_EXT
is defined when the routine is compiled, then the following additional
conversions will be available.
These are borrowed from the SunOS version of
.IR strftime .
.TP
.B %k
is replaced by the hour (24-hour clock) as a decimal number
.RB ( 0 - 23 ).
Single digit numbers are padded with a blank.
.TP
.B %l
is replaced by the hour (12-hour clock) as a decimal number
.RB ( 1 - 12 ).
Single digit numbers are padded with a blank.
.SS HP/UX Extensions
If
.B HPUX_EXT
is defined when the routine is compiled, then the following additional
conversions will be available.
These are borrowed from the HP-UX version of
.IR date .
.TP
.B %N
The ``Emporer/Era'' name.
Typically, this is equivalent to the century
(same as
.B %C ).
.TP
.B %o
The ``Emporer/Era'' year.
Typically, this is equivalent to the year
(same as
.B %y ).
.SS VMS Extensions
If
.B VMS_EXT
is defined, then the following additional conversion is available:
.TP
.B %v
The date in VMS format (e.g. 20-JUN-1991).
.SS POSIX 2008 Extensions
The POSIX 1003.1-2008 standard allows for a leading
.I flag
and
.I "field width"
for the
.BR %C ,
.BR %F ,
.BR %G ,
and
.B %Y
format specifiers.
The flag may be either
.BR 0 ,
which specifies that the generated field should be padded with zeros, or
.BR + ,
which specifies that the padding with zeros should occur, and that the field
will have a leading plus-sign
if the value is positive, or a leading minus-sign if it is negative.
.PP
The field width is a value in decimal.
Either the field width and a flag are present together, or neither of them
may be supplied.
The results are ``unspecified'' if only one or the other are provided,
or if they are provided on a format specifier not in the preceding list.
If
.B POSIX_2008
is defined, the code supports the leading flag and field width.
.SS Other Extensions
If
.B HAVE_MKTIME
is defined, then this conversion is available:
.TP
.B %s
The time in ``seconds since the Epoch,''
usually Midnight January 1, 1970, UTC.
.SH SEE ALSO
.IR time (2),
.IR ctime (3),
.IR localtime (3),
.IR mktime (3),
.IR tzset (3)
.SH BUGS
This version does not handle multibyte characters.
.SH CAVEATS
The pre-processor symbol
.B POSIX_SEMANTICS
is automatically defined, which forces the code to call
.IR tzset (3)
whenever the
.B TZ
environment variable has changed.
If this routine will be used in an application that will not be changing
.BR TZ ,
then there may be some performance improvements by not defining
.BR POSIX_SEMANTICS .
.SH AUTHOR
Arnold Robbins <arnold@skeeve.com>
.SH ACKNOWLEDGEMENTS
Thanks to Geoff Clare <gwc@root.co.uk> for helping debug earlier
versions of this routine, and for advice about POSIX semantics.
Additional thanks to Arthur David Olsen <ado@elsie.nci.nih.gov>
for some code improvements.
Thanks also to Tor Lillqvist <tml@tik.vtt.fi>
for code fixes to the ISO 8601 code.
Thanks to Hume Smith for pointing out a problem with the ISO 8601 code
and to Arthur David Olsen for further discussions.
